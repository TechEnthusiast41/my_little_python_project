import tkinter as tk
from tkinter import filedialog, messagebox
import requests
import markdown
from tkinter.scrolledtext import ScrolledText

# API请求函数，用于调用硅基流动API进行降重处理
def call_api(input_text, model_choice):
    # 定义API请求的URL
    url = "https://api.siliconflow.cn/v1/chat/completions"

    # 构造API请求的payload数据
    payload = {
        "model": model_choice,  # 选择使用的模型
        "messages": [
            {
                "role": "user",
                "content": f"I am preparing an SCI paper for submission and need your help to refine each paragraph for better academic rigor. Your task is to identify and correct grammar issues, improve sentence structure, and enhance formal academic tone where necessary. Here's the paragraph to refine: {input_text}"
            }
        ],
        "stream": False,
        "max_tokens": 512,
        "temperature": 0.7,
        "top_p": 0.7,
        "top_k": 50,
        "frequency_penalty": 0.5,
        "n": 1,
        "response_format": {"type": "text"}  # 返回文本格式
    }

    # 定义请求头，带上API密钥
    headers = {
        "Authorization": "Bearer sk-*",  # 需要替换为你的API密钥
        "Content-Type": "application/json"
    }

    # 发送POST请求，调用API
    response = requests.post(url, json=payload, headers=headers)

    # 返回API响应的JSON数据
    return response.json()

# 选择文件函数，用户可以上传文本文件
def select_file():
    # 打开文件选择对话框，允许用户选择文本文件
    file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
    if file_path:
        # 如果选择了文件，读取文件内容并显示到文本框中
        with open(file_path, 'r', encoding='utf-8') as file:
            input_text.delete(1.0, tk.END)  # 清空文本框
            input_text.insert(tk.END, file.read())  # 将文件内容插入到文本框

# 提交按钮的回调函数，触发降重操作
def on_submit():
    # 获取用户输入的文本，并去除多余的空白字符
    text = input_text.get(1.0, tk.END).strip()

    # 如果没有输入文本，弹出提示框提醒用户
    if not text:
        messagebox.showerror("错误", "请输入或上传要修改的段落。")
        return

    # 获取用户选择的模型
    model_choice = model_var.get()

    # 获取用户选择的语言（中文或英文）
    language_choice = language_var.get()

    # 调用API进行降重处理
    response = call_api(text, model_choice)

    # 如果API返回了有效的响应
    if response.get("choices"):
        # 生成Markdown格式的输出，并根据语言选择调整生成内容
        markdown_output = generate_markdown(response['choices'][0]['message']['content'], language_choice)

        # 清空输出文本框，插入生成的Markdown内容
        output_text.delete(1.0, tk.END)
        output_text.insert(tk.END, markdown_output)
    else:
        # 如果API响应没有返回有效数据，弹出错误提示框
        messagebox.showerror("错误", "API响应错误，请重试。")

# 生成Markdown格式输出的函数
def generate_markdown(response_text, language_choice):
    # 定义Markdown内容，首先输出重写后的段落
    markdown_content = f"### 重写后的段落\n\n{response_text}\n\n"

    # 添加对比表格的标题
    markdown_content += "### 对比表格\n\n"

    # Markdown表格的表头
    markdown_content += "| 原句 | 修改后的句子 | 修改原因 |\n"
    markdown_content += "|-------------------|------------------|-------------------|\n"

    # 示例：添加修改后的表格（此处可以根据API返回的内容动态生成）
    markdown_content += "| SCI 论文的撰写需要特别注意语言的精准性。 | 撰写 SCI 论文时，必须高度重视语言的准确性。 | 修改了语气和结构。 |\n"

    # 如果选择生成中文结果，则显示中文的原文和修改后的内容对比
    if language_choice == '中文':
        markdown_content += f"### 完整内容对比（中文）\n\n原文：\n\nSCI 论文的撰写需要特别注意语言的精准性。\n\n修改后：\n\n撰写 SCI 论文时，必须高度重视语言的准确性。\n"
    else:
        # 如果选择生成英文结果，则显示英文的原文和修改后的内容对比
        markdown_content += f"### Complete Content Comparison (English)\n\nOriginal:\n\nThe writing of SCI papers requires special attention to language precision.\n\nRevised:\n\nThe writing of SCI papers must emphasize the accuracy of language.\n"

    # 返回生成的Markdown内容
    return markdown_content

# 创建主窗口
root = tk.Tk()
root.title("SCI论文降重工具 - 创作者：zzn - 创作时间：2025年3月27日")  # 设置窗口标题

# 设置窗口大小
root.geometry("800x600")

# 创建文本框标签，提示用户输入段落
input_text_label = tk.Label(root, text="输入段落：")
input_text_label.pack(pady=5)

# 创建文本框，允许用户输入长文本
input_text = ScrolledText(root, width=80, height=10)
input_text.pack(pady=10)

# 创建上传文件按钮，用户点击按钮可以上传文件
upload_button = tk.Button(root, text="上传文本文件", command=select_file)
upload_button.pack(pady=5)

# 创建模型选择框，让用户选择想要使用的模型
model_var = tk.StringVar(value="Qwen/QVQ-72B-Preview")  # 默认选择Qwen/QVQ-72B-Preview模型
model_label = tk.Label(root, text="选择模型：")
model_label.pack(pady=5)

# 创建模型选择下拉框
model_menu = tk.OptionMenu(root, model_var, "deepseek-ai/DeepSeek-R1", "deepseek-ai/DeepSeek-V3", "Qwen/QVQ-72B-Preview")
model_menu.pack(pady=5)

# 创建语言选择框，让用户选择生成结果的语言
language_var = tk.StringVar(value="中文")  # 默认选择中文
language_label = tk.Label(root, text="选择生成语言：")
language_label.pack(pady=5)

# 创建语言选择下拉框
language_menu = tk.OptionMenu(root, language_var, "中文", "English")
language_menu.pack(pady=5)

# 创建提交按钮，用户点击后触发AI降重
submit_button = tk.Button(root, text="AI降重", command=on_submit)
submit_button.pack(pady=20)

# 创建输出结果的文本框，显示降重后的结果
output_label = tk.Label(root, text="降重后的结果（Markdown）：")
output_label.pack(pady=5)

# 创建输出结果的滚动文本框
output_text = ScrolledText(root, width=80, height=15)
output_text.pack(pady=10)

# 启动GUI应用程序，进入主事件循环
root.mainloop()
